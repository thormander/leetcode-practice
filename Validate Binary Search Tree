# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:

        def DFS(node,leftBound,rightBound):

            # base case
            if not node:
                return True

            # case when it violates BST rules
            if not (leftBound < node.val and node.val < rightBound):
                return False

            left = DFS(node.left,leftBound,node.val)
            right = DFS(node.right,node.val,rightBound)

            return left and right
        
        return DFS(root,float("-inf"),float("inf"))
                

        
        '''
        DFS; use 2 bounds: lower and upepr
        '''
